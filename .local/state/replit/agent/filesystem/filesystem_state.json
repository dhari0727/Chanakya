{"file_contents":{"app.py":{"content":"import os\nimport json\nimport logging\nimport requests\nimport time\nimport random\nimport re\nfrom urllib.parse import urljoin, urlparse, quote\nfrom flask import Flask, render_template, request, jsonify, redirect, url_for\nimport trafilatura\nfrom bs4 import BeautifulSoup\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Create Flask app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key\")\n\n# Search engine configuration\nUSER_AGENTS = [\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n]\n\nclass SearchEngine:\n    def __init__(self):\n        self.session = requests.Session()\n        self.perplexity_api_key = os.environ.get(\"PERPLEXITY_API_KEY\")\n        # Load knowledge base for enhanced search\n        self.knowledge_base = self._load_knowledge_base()\n        \n    def search_web(self, query, num_results=10):\n        \"\"\"\n        Perform intelligent search using Perplexity API for real-time results\n        \"\"\"\n        results = []\n        \n        # Use Perplexity API for comprehensive, Google-like results\n        if self.perplexity_api_key:\n            try:\n                perplexity_results = self._search_perplexity(query, num_results)\n                if perplexity_results and len(perplexity_results) >= 3:\n                    return perplexity_results[:num_results]\n            except Exception as e:\n                logging.warning(f\"Perplexity search failed: {e}\")\n        \n        # Fallback to enhanced contextual results\n        enhanced_results = self._get_enhanced_contextual_results(query, num_results)\n        return enhanced_results[:num_results]\n    \n    def get_direct_answer(self, query):\n        \"\"\"Get direct answer for specific query types like Google's answer boxes\"\"\"\n        if not self.perplexity_api_key:\n            return None\n            \n        try:\n            headers = {\n                'Authorization': f'Bearer {self.perplexity_api_key}',\n                'Content-Type': 'application/json'\n            }\n            \n            # Optimized prompt for direct answers\n            data = {\n                'model': 'llama-3.1-sonar-large-128k-online',\n                'messages': [\n                    {\n                        'role': 'system',\n                        'content': 'You are a search engine that provides direct, factual answers. For calculations, show the result clearly. For questions, provide concise, accurate answers with key facts. Keep responses under 200 words and focus on the most important information.'\n                    },\n                    {\n                        'role': 'user',\n                        'content': query\n                    }\n                ],\n                'max_tokens': 300,\n                'temperature': 0.1,\n                'search_recency_filter': 'month',\n                'return_citations': True\n            }\n            \n            response = self.session.post('https://api.perplexity.ai/chat/completions', \n                                       headers=headers, \n                                       json=data, \n                                       timeout=20)\n            response.raise_for_status()\n            \n            result = response.json()\n            content = result['choices'][0]['message']['content']\n            \n            # Clean up the response for display\n            if content and len(content.strip()) > 0:\n                return {\n                    'answer': content.strip(),\n                    'sources': result.get('citations', [])[:3]  # Top 3 sources\n                }\n                \n        except Exception as e:\n            logging.error(f\"Direct answer API error: {e}\")\n            \n        return None\n    \n    def _search_perplexity(self, query, num_results):\n        \"\"\"Search using Perplexity API for real-time, comprehensive results\"\"\"\n        headers = {\n            'Authorization': f'Bearer {self.perplexity_api_key}',\n            'Content-Type': 'application/json'\n        }\n        \n        # Determine the best model and parameters based on query type\n        model, search_params = self._get_perplexity_params(query)\n        \n        data = {\n            'model': model,\n            'messages': [\n                {\n                    'role': 'system',\n                    'content': 'You are a search engine that provides comprehensive, accurate results with proper citations. Format your response as search results with titles, URLs, and descriptions.'\n                },\n                {\n                    'role': 'user',\n                    'content': f'Search for: {query}. Provide {num_results} relevant search results with titles, URLs, and descriptions.'\n                }\n            ],\n            **search_params\n        }\n        \n        try:\n            response = self.session.post('https://api.perplexity.ai/chat/completions', \n                                       headers=headers, \n                                       json=data, \n                                       timeout=30)\n            response.raise_for_status()\n            \n            result_data = response.json()\n            content = result_data['choices'][0]['message']['content']\n            citations = result_data.get('citations', [])\n            \n            # Parse the response into search results\n            return self._parse_perplexity_response(content, citations, query)\n            \n        except Exception as e:\n            logging.error(f\"Perplexity API error: {e}\")\n            return []\n    \n    def _get_perplexity_params(self, query):\n        \"\"\"Determine optimal Perplexity parameters based on query type\"\"\"\n        query_lower = query.lower()\n        \n        # For current events and news\n        if any(word in query_lower for word in ['latest', 'recent', 'current', 'news', '2024', '2025', 'today']):\n            return 'llama-3.1-sonar-large-128k-online', {\n                'max_tokens': 1000,\n                'temperature': 0.2,\n                'search_recency_filter': 'month',\n                'return_citations': True,\n                'return_related_questions': False\n            }\n        \n        # For calculations and technical queries\n        elif any(word in query_lower for word in ['calculate', 'solve', 'ร', '*', '+', '-', 'รท', '/', '=']) or any(c.isdigit() for c in query):\n            return 'llama-3.1-sonar-small-128k-online', {\n                'max_tokens': 500,\n                'temperature': 0.1,\n                'return_citations': True,\n                'return_related_questions': False\n            }\n        \n        # For definitions and knowledge\n        elif any(word in query_lower for word in ['what is', 'define', 'explain', 'how to', 'difference between']):\n            return 'llama-3.1-sonar-large-128k-online', {\n                'max_tokens': 800,\n                'temperature': 0.2,\n                'return_citations': True,\n                'return_related_questions': True\n            }\n        \n        # General search\n        else:\n            return 'llama-3.1-sonar-small-128k-online', {\n                'max_tokens': 600,\n                'temperature': 0.3,\n                'return_citations': True,\n                'return_related_questions': False\n            }\n    \n    def _parse_perplexity_response(self, content, citations, query):\n        \"\"\"Parse Perplexity API response into structured search results\"\"\"\n        results = []\n        \n        # If we have citations, use them to create structured results\n        if citations:\n            for i, citation in enumerate(citations[:10]):\n                try:\n                    # Extract domain from URL\n                    domain = self._extract_domain(citation)\n                    \n                    # Create title based on query and domain\n                    title = self._generate_title_from_domain(domain, query)\n                    \n                    # Extract relevant snippet from content\n                    snippet = self._extract_relevant_snippet(content, citation, query)\n                    \n                    results.append({\n                        'title': title,\n                        'url': citation,\n                        'domain': domain,\n                        'snippet': snippet\n                    })\n                except Exception as e:\n                    logging.warning(f\"Error parsing citation {citation}: {e}\")\n                    continue\n        \n        # If no citations or need more results, generate from content\n        if len(results) < 3:\n            content_results = self._generate_results_from_content(content, query)\n            results.extend(content_results)\n        \n        return results[:10]\n    \n    def _generate_title_from_domain(self, domain, query):\n        \"\"\"Generate appropriate title based on domain and query\"\"\"\n        domain_titles = {\n            'wikipedia.org': f'{query.title()} - Wikipedia',\n            'britannica.com': f'{query.title()} - Encyclopedia Britannica',\n            'merriam-webster.com': f'{query.title()} - Definition & Meaning',\n            'dictionary.com': f'{query.title()} - Dictionary.com',\n            'nasa.gov': f'{query.title()} - NASA',\n            'cnn.com': f'{query.title()} - CNN',\n            'bbc.com': f'{query.title()} - BBC News',\n            'reuters.com': f'{query.title()} - Reuters',\n            'nytimes.com': f'{query.title()} - The New York Times',\n            'washingtonpost.com': f'{query.title()} - The Washington Post',\n            'nature.com': f'{query.title()} - Nature',\n            'science.org': f'{query.title()} - Science Magazine',\n            'stackoverflow.com': f'{query.title()} - Stack Overflow',\n            'github.com': f'{query.title()} - GitHub',\n            'medium.com': f'{query.title()} - Medium',\n            'reddit.com': f'{query.title()} - Reddit',\n            'youtube.com': f'{query.title()} - YouTube',\n            'coursera.org': f'{query.title()} - Coursera',\n            'khan-academy.org': f'{query.title()} - Khan Academy'\n        }\n        \n        return domain_titles.get(domain, f'{query.title()} - {domain.replace(\"www.\", \"\").title()}')\n    \n    def _extract_relevant_snippet(self, content, citation, query):\n        \"\"\"Extract relevant snippet from content related to the citation\"\"\"\n        # Split content into sentences\n        sentences = content.split('.')\n        \n        # Find sentences that might relate to this citation\n        relevant_sentences = []\n        query_words = query.lower().split()\n        \n        for sentence in sentences:\n            sentence_lower = sentence.lower()\n            if any(word in sentence_lower for word in query_words) and len(sentence.strip()) > 20:\n                relevant_sentences.append(sentence.strip())\n        \n        if relevant_sentences:\n            # Return the most relevant sentence, limited to 200 characters\n            best_sentence = max(relevant_sentences, key=len)\n            return best_sentence[:200] + \"...\" if len(best_sentence) > 200 else best_sentence\n        \n        # Fallback to generic snippet\n        return f\"Comprehensive information about {query} from authoritative sources.\"\n    \n    def _generate_results_from_content(self, content, query):\n        \"\"\"Generate search results from Perplexity content when citations are limited\"\"\"\n        results = []\n        \n        # Common authoritative sources for different query types\n        query_lower = query.lower()\n        \n        if any(word in query_lower for word in ['what is', 'define', 'explain']):\n            results.extend([\n                {\n                    'title': f'{query.title()} - Wikipedia',\n                    'url': f'https://en.wikipedia.org/wiki/{query.replace(\" \", \"_\")}',\n                    'domain': 'wikipedia.org',\n                    'snippet': content[:200] + \"...\" if len(content) > 200 else content\n                },\n                {\n                    'title': f'{query.title()} - Encyclopedia Britannica',\n                    'url': f'https://www.britannica.com/search?query={quote(query)}',\n                    'domain': 'britannica.com',\n                    'snippet': f\"Comprehensive encyclopedia entry about {query} with detailed explanations and historical context.\"\n                }\n            ])\n        \n        elif any(word in query_lower for word in ['news', 'latest', 'recent', 'current']):\n            results.extend([\n                {\n                    'title': f'{query.title()} - Latest News',\n                    'url': f'https://news.google.com/search?q={quote(query)}',\n                    'domain': 'news.google.com',\n                    'snippet': content[:200] + \"...\" if len(content) > 200 else content\n                },\n                {\n                    'title': f'{query.title()} - Reuters',\n                    'url': f'https://www.reuters.com/search/news?blob={quote(query)}',\n                    'domain': 'reuters.com',\n                    'snippet': f\"Latest news and updates about {query} from Reuters news agency.\"\n                }\n            ])\n        \n        elif any(c.isdigit() for c in query) or any(op in query for op in ['ร', '*', '+', '-', 'รท', '/', '=']):\n            # Math/calculation results\n            results.append({\n                'title': f'Calculate: {query}',\n                'url': 'https://www.wolframalpha.com/',\n                'domain': 'wolframalpha.com',\n                'snippet': content[:300] + \"...\" if len(content) > 300 else content\n            })\n        \n        return results\n    \n    def _load_knowledge_base(self):\n        \"\"\"Load extended knowledge base from various sources\"\"\"\n        knowledge = {\n            'technology': {\n                'python': {\n                    'title': 'Python Programming Language - Official Website',\n                    'url': 'https://www.python.org',\n                    'domain': 'python.org',\n                    'snippet': 'Python is a programming language that lets you work quickly and integrate systems more effectively.'\n                },\n                'flask': {\n                    'title': 'Flask - Web Development with Python',\n                    'url': 'https://flask.palletsprojects.com',\n                    'domain': 'flask.palletsprojects.com',\n                    'snippet': 'Flask is a lightweight WSGI web application framework designed to make getting started quick and easy.'\n                },\n                'javascript': {\n                    'title': 'JavaScript - MDN Web Docs',\n                    'url': 'https://developer.mozilla.org/docs/Web/JavaScript',\n                    'domain': 'developer.mozilla.org',\n                    'snippet': 'JavaScript (JS) is a lightweight, interpreted programming language with first-class functions.'\n                },\n                'react': {\n                    'title': 'React - A JavaScript Library for Building User Interfaces',\n                    'url': 'https://reactjs.org',\n                    'domain': 'reactjs.org',\n                    'snippet': 'A JavaScript library for building user interfaces. React makes it painless to create interactive UIs.'\n                }\n            },\n            'general': {\n                'weather': self._generate_weather_results,\n                'news': self._generate_news_results,\n                'calculate': self._handle_calculations\n            }\n        }\n        return knowledge\n    \n    def _generate_weather_results(self, query):\n        \"\"\"Generate weather-related results\"\"\"\n        return [{\n            'title': 'Weather Forecast - Current Conditions',\n            'url': 'https://weather.com',\n            'domain': 'weather.com',\n            'snippet': f'Current weather conditions and forecast for your search: {query}'\n        }]\n    \n    def _generate_news_results(self, query):\n        \"\"\"Generate news-related results\"\"\"\n        return [{\n            'title': f'Latest News about {query} - Breaking News',\n            'url': 'https://news.google.com',\n            'domain': 'news.google.com',\n            'snippet': f'Stay updated with the latest news and developments about {query}'\n        }]\n    \n    def _handle_calculations(self, query):\n        \"\"\"Handle calculation queries\"\"\"\n        # Simple math evaluation (safely)\n        import ast\n        import operator as op\n        \n        operators = {ast.Add: op.add, ast.Sub: op.sub, ast.Mult: op.mul, ast.Div: op.truediv}\n        \n        try:\n            # Extract numbers and basic operations\n            if any(char in query for char in '+-*/'):\n                result = eval(query.strip(), {\"__builtins__\": {}}, {})\n                return [{\n                    'title': f'{query} = {result}',\n                    'url': 'https://calculator.net',\n                    'domain': 'calculator.net',\n                    'snippet': f'Calculation result for {query} equals {result}'\n                }]\n        except:\n            pass\n        return []\n    \n    def _get_enhanced_contextual_results(self, query, num_results):\n        \"\"\"Get enhanced results based on query context\"\"\"\n        results = []\n        query_lower = query.lower()\n        \n        # Generate contextual results based on query type\n        results.extend(self._generate_contextual_results(query, query_lower))\n        \n        # Load and filter mock results with better matching\n        if len(results) < num_results:\n            try:\n                with open('static/data/mock_results.json', 'r') as f:\n                    mock_results = json.load(f)\n                \n                # Smart filtering based on query with better matching\n                scored_results = []\n                query_words = query_lower.split()\n                \n                for result in mock_results:\n                    title_lower = result['title'].lower()\n                    snippet_lower = result['snippet'].lower()\n                    \n                    # Calculate relevance score\n                    score = 0\n                    for word in query_words:\n                        if word in title_lower:\n                            score += 5  # Higher weight for title matches\n                        if word in snippet_lower:\n                            score += 2  # Lower weight for snippet matches\n                        \n                        # Partial word matching\n                        for title_word in title_lower.split():\n                            if word in title_word or title_word in word:\n                                score += 1\n                    \n                    if score > 0:\n                        scored_results.append((score, result))\n                \n                # Sort by relevance score and add to results\n                scored_results.sort(key=lambda x: x[0], reverse=True)\n                for score, result in scored_results:\n                    if len(results) >= num_results:\n                        break\n                    results.append(result)\n                \n                # If still not enough results, add some general ones with diversity\n                if len(results) < num_results:\n                    # Add diverse results instead of just the first ones\n                    added_domains = set(r.get('domain', '') for r in results)\n                    for result in mock_results:\n                        if len(results) >= num_results:\n                            break\n                        if result not in results and result.get('domain', '') not in added_domains:\n                            results.append(result)\n                            added_domains.add(result.get('domain', ''))\n                            \n            except FileNotFoundError:\n                logging.warning(\"Mock results file not found\")\n        \n        return results[:num_results]\n    \n    def _generate_contextual_results(self, original_query, query_lower):\n        \"\"\"Generate contextual results based on query analysis\"\"\"\n        results = []\n        \n        # Handle specific question types\n        if any(word in query_lower for word in ['what is', 'what are', 'define', 'meaning of']):\n            # Extract the subject being asked about\n            subject = self._extract_subject_from_query(original_query, query_lower)\n            if subject:\n                results.extend(self._generate_definition_results(subject, original_query))\n        \n        # Handle recipe queries\n        elif any(word in query_lower for word in ['recipe', 'how to cook', 'how to make', 'cooking']):\n            results.extend(self._generate_recipe_results(original_query))\n        \n        # Handle weather queries\n        elif any(word in query_lower for word in ['weather', 'temperature', 'forecast', 'climate']):\n            results.extend(self._generate_weather_results(original_query))\n            \n        # Handle news queries\n        elif any(word in query_lower for word in ['news', 'breaking', 'latest', 'current events']):\n            results.extend(self._generate_news_results(original_query))\n            \n        # Handle calculation queries\n        elif any(char in original_query for char in '+-*/=') and any(c.isdigit() for c in original_query):\n            calc_results = self._handle_calculations(original_query)\n            if calc_results:\n                results.extend(calc_results)\n        \n        # Handle technology queries (but not for everything)\n        elif any(keyword in query_lower for keyword in ['programming', 'code', 'software', 'python', 'javascript']):\n            tech_results = self._generate_tech_results(query_lower)\n            results.extend(tech_results)\n        \n        return results\n    \n    def _extract_subject_from_query(self, original_query, query_lower):\n        \"\"\"Extract the main subject from 'what is X' type queries\"\"\"\n        # Remove common question words\n        question_patterns = ['what is', 'what are', 'define', 'meaning of', 'tell me about']\n        for pattern in question_patterns:\n            if pattern in query_lower:\n                subject = original_query.lower().replace(pattern, '').strip()\n                # Remove question marks and extra whitespace\n                subject = subject.replace('?', '').strip()\n                return subject\n        return None\n    \n    def _generate_definition_results(self, subject, original_query):\n        \"\"\"Generate definition-type results\"\"\"\n        results = []\n        \n        # Create contextual definition results\n        if 'google' in subject.lower():\n            results.append({\n                'title': 'Google - Search Engine and Technology Company',\n                'url': 'https://www.google.com/about/',\n                'domain': 'google.com',\n                'snippet': 'Google is a multinational technology company that specializes in Internet-related services and products, including online advertising technologies, a search engine, cloud computing, and software.'\n            })\n            results.append({\n                'title': 'Google - Wikipedia',\n                'url': 'https://en.wikipedia.org/wiki/Google',\n                'domain': 'wikipedia.org',\n                'snippet': 'Google LLC is an American multinational technology company that focuses on search engine technology, online advertising, cloud computing, computer software, and artificial intelligence.'\n            })\n        elif 'pancake' in subject.lower():\n            results.append({\n                'title': 'Pancake - Definition and Recipes',\n                'url': 'https://www.merriam-webster.com/dictionary/pancake',\n                'domain': 'merriam-webster.com',\n                'snippet': 'A pancake is a flat cake made from thin batter and cooked on both sides on a griddle or in a frying pan. Pancakes are popular breakfast items around the world.'\n            })\n            results.append({\n                'title': 'Easy Pancake Recipe - Allrecipes',\n                'url': 'https://www.allrecipes.com/recipe/21014/good-old-fashioned-pancakes/',\n                'domain': 'allrecipes.com',\n                'snippet': 'Learn how to make fluffy, delicious pancakes from scratch with this classic pancake recipe. Perfect for weekend breakfast or brunch.'\n            })\n        else:\n            # Generic definition result\n            results.append({\n                'title': f'{subject.title()} - Definition and Information',\n                'url': f'https://www.merriam-webster.com/dictionary/{subject.replace(\" \", \"-\")}',\n                'domain': 'merriam-webster.com',\n                'snippet': f'Find the definition, pronunciation, and usage examples for {subject}. Learn more about this topic from authoritative sources.'\n            })\n            results.append({\n                'title': f'{subject.title()} - Wikipedia',\n                'url': f'https://en.wikipedia.org/wiki/{subject.replace(\" \", \"_\")}',\n                'domain': 'wikipedia.org',\n                'snippet': f'Comprehensive information about {subject} including history, details, and related topics from the world\\'s largest encyclopedia.'\n            })\n        \n        return results\n    \n    def _generate_recipe_results(self, query):\n        \"\"\"Generate recipe-related results\"\"\"\n        return [\n            {\n                'title': f'{query.title()} - Allrecipes',\n                'url': f'https://www.allrecipes.com/search/results/?search={query.replace(\" \", \"+\")}',\n                'domain': 'allrecipes.com',\n                'snippet': f'Find the best {query} recipes with step-by-step instructions, ingredients, and user reviews.'\n            },\n            {\n                'title': f'{query.title()} - Food Network',\n                'url': f'https://www.foodnetwork.com/search/{query.replace(\" \", \"-\")}',\n                'domain': 'foodnetwork.com',\n                'snippet': f'Professional chef recipes and cooking tips for {query}. Easy-to-follow instructions with photos.'\n            },\n            {\n                'title': f'{query.title()} - BBC Good Food',\n                'url': f'https://www.bbcgoodfood.com/search/recipes?q={query.replace(\" \", \"+\")}',\n                'domain': 'bbcgoodfood.com',\n                'snippet': f'Tried and tested {query} recipes from BBC Good Food. Healthy and delicious meal ideas.'\n            }\n        ]\n    \n    def _generate_tech_results(self, query_lower):\n        \"\"\"Generate technology-related results\"\"\"\n        results = []\n        for tech, info in self.knowledge_base['technology'].items():\n            if tech in query_lower or any(word in info['title'].lower() for word in query_lower.split()):\n                results.append(info)\n        return results\n    \n    def _extract_domain(self, url):\n        \"\"\"Extract domain from URL\"\"\"\n        try:\n            parsed = urlparse(url)\n            domain = parsed.netloc\n            if domain.startswith('www.'):\n                domain = domain[4:]\n            return domain\n        except:\n            return \"unknown.com\"\n    \n    def _get_enhanced_mock_results(self, query, num_results):\n        \"\"\"Generate contextual mock results based on the query\"\"\"\n        # Load original mock results\n        try:\n            with open('static/data/mock_results.json', 'r') as f:\n                all_results = json.load(f)\n        except FileNotFoundError:\n            all_results = []\n        \n        # Filter results based on query keywords\n        query_lower = query.lower()\n        matched_results = []\n        \n        for result in all_results:\n            title_match = any(word in result['title'].lower() for word in query_lower.split())\n            snippet_match = any(word in result['snippet'].lower() for word in query_lower.split())\n            \n            if title_match or snippet_match:\n                matched_results.append(result)\n        \n        # If we have matches, return them; otherwise return general results\n        if matched_results:\n            return matched_results[:num_results]\n        else:\n            return all_results[:num_results]\n\n# Initialize search engine\nsearch_engine = SearchEngine()\n\n@app.route('/')\ndef index():\n    \"\"\"Homepage with centered search bar\"\"\"\n    return render_template('index.html')\n\n@app.route('/search')\ndef search():\n    \"\"\"Search results page with real web search and direct answers\"\"\"\n    query = request.args.get('q', '')\n    page = request.args.get('page', 1, type=int)\n    \n    if not query:\n        return redirect(url_for('index'))\n    \n    # Get direct answer for specific query types (like Google's answer box)\n    direct_answer = None\n    if page == 1:  # Only show direct answers on first page\n        query_lower = query.lower()\n        # Check if this is a query that might have a direct answer\n        if (any(word in query_lower for word in ['who', 'what', 'when', 'where', 'why', 'how', 'define', 'capital', 'largest', 'longest', 'first']) \n            or any(c.isdigit() for c in query) \n            or any(op in query for op in ['ร', '*', '+', '-', 'รท', '/', '=', 'solve'])):\n            direct_answer = search_engine.get_direct_answer(query)\n    \n    # Perform real web search\n    results_per_page = 10\n    start_idx = (page - 1) * results_per_page\n    \n    # Get more results than needed to handle pagination\n    total_results_needed = page * results_per_page\n    \n    try:\n        # Perform web search\n        all_search_results = search_engine.search_web(query, max(20, total_results_needed))\n        \n        # Simulate realistic result counts like Google\n        if all_search_results:\n            # Generate a realistic total result count\n            base_count = len(all_search_results) * random.randint(1000, 50000)\n            total_results = base_count + random.randint(100, 999)\n        else:\n            total_results = 0\n            \n        # Get results for current page\n        paginated_results = all_search_results[start_idx:start_idx + results_per_page]\n        \n        # Calculate pagination info\n        total_pages = min(20, (len(all_search_results) + results_per_page - 1) // results_per_page)\n        if total_pages == 0:\n            total_pages = 1\n            \n    except Exception as e:\n        logging.error(f\"Search error: {e}\")\n        # Fallback to enhanced mock results\n        all_search_results = search_engine._get_enhanced_mock_results(query, 20)\n        paginated_results = all_search_results[start_idx:start_idx + results_per_page]\n        total_results = random.randint(100000, 999999)\n        total_pages = min(10, len(all_search_results) // results_per_page + 1)\n    \n    # Add search timing simulation\n    search_time = round(random.uniform(0.15, 0.89), 2)\n    \n    return render_template('search.html', \n                         query=query, \n                         results=paginated_results,\n                         direct_answer=direct_answer,\n                         page=page,\n                         total_pages=total_pages,\n                         total_results=total_results,\n                         results_per_page=results_per_page,\n                         search_time=search_time)\n\n@app.route('/api/suggestions')\ndef get_suggestions():\n    \"\"\"Enhanced API endpoint for search suggestions\"\"\"\n    query = request.args.get('q', '').lower()\n    \n    if not query:\n        return jsonify([])\n    \n    suggestions = []\n    \n    # Popular searches and trending topics\n    popular_searches = [\n        \"python programming\", \"javascript tutorial\", \"react development\",\n        \"machine learning\", \"artificial intelligence\", \"web development\",\n        \"data science\", \"cloud computing\", \"cybersecurity\", \"blockchain\",\n        \"mobile development\", \"software engineering\", \"open source projects\",\n        \"coding bootcamp\", \"programming languages\", \"tech news today\",\n        \"weather forecast\", \"stock market\", \"cryptocurrency prices\",\n        \"sports scores\", \"movie reviews\", \"restaurant near me\"\n    ]\n    \n    # Load custom suggestions from file\n    try:\n        with open('static/data/suggestions.json', 'r') as f:\n            file_suggestions = json.load(f)\n        popular_searches.extend(file_suggestions)\n    except FileNotFoundError:\n        pass\n    \n    # Smart matching - prioritize exact matches, then partial matches\n    exact_matches = [s for s in popular_searches if s.lower().startswith(query)]\n    partial_matches = [s for s in popular_searches if query in s.lower() and not s.lower().startswith(query)]\n    \n    suggestions = exact_matches + partial_matches\n    \n    # Remove duplicates while preserving order\n    seen = set()\n    unique_suggestions = []\n    for suggestion in suggestions:\n        if suggestion.lower() not in seen:\n            seen.add(suggestion.lower())\n            unique_suggestions.append(suggestion)\n    \n    return jsonify(unique_suggestions[:8])  # Return max 8 suggestions\n\n@app.route('/lucky')\ndef feeling_lucky():\n    \"\"\"I'm Feeling Lucky functionality - redirects to first result\"\"\"\n    query = request.args.get('q', '')\n    \n    if not query:\n        return redirect(url_for('index'))\n    \n    # Get search results and redirect to first one\n    try:\n        results = search_engine.search_web(query, 1)\n        if results and len(results) > 0:\n            first_result = results[0]\n            # For demo purposes, redirect to the first result URL\n            # In production, this would open the actual website\n            return redirect(first_result['url'])\n    except Exception as e:\n        logging.error(f\"Feeling lucky error: {e}\")\n    \n    # Fallback to regular search if no results or error\n    return redirect(url_for('search', q=query))\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":33964},"main.py":{"content":"from app import app\n","size_bytes":20},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"beautifulsoup4>=4.13.4\",\n    \"email-validator>=2.2.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"lxml>=5.4.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"requests>=2.32.4\",\n    \"trafilatura>=2.0.0\",\n    \"urllib3>=2.5.0\",\n]\n","size_bytes":401},"replit.md":{"content":"# Overview\n\nThis is a Google Search clone web application that mimics the appearance and basic functionality of Google's search interface. The application features a homepage with the iconic Google logo and search bar, plus a search results page that displays mock data. It's built as a simple demonstration of web development skills, focusing on frontend design and user experience rather than actual search functionality.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe application uses a traditional server-side rendered architecture with Flask templates and Bootstrap for styling. The frontend consists of two main pages: a homepage with a centered search interface that closely mimics Google's design, and a search results page that displays paginated mock results. The UI leverages Bootstrap 5 for responsive design and Font Awesome for icons, with custom CSS to achieve Google's distinctive visual styling including the multicolored logo and clean search interface.\n\n## Backend Architecture\nBuilt on Flask, a lightweight Python web framework, the backend follows a simple MVC pattern. The main application logic is contained in `app.py` with route handlers for the homepage and search functionality. The application uses file-based data storage with JSON files for mock search results and search suggestions, rather than a database. This keeps the architecture simple while demonstrating core web development concepts like routing, templating, and data handling.\n\n## Data Storage\nThe application uses static JSON files stored in the `static/data/` directory for all data needs. `mock_results.json` contains sample search results with titles, URLs, domains, and snippets, while `suggestions.json` holds predefined search suggestions. This file-based approach eliminates the need for database setup while still providing realistic search functionality for demonstration purposes.\n\n## Search Functionality\nThe search system implements basic text matching against the mock data, filtering results based on whether the search query appears in result titles or snippets. If no specific matches are found, it defaults to showing general results. The system includes pagination with 10 results per page and maintains search state through URL parameters, providing a realistic search experience despite using static data.\n\n## User Interface Components\nThe frontend implements key Google Search features including autocomplete suggestions with keyboard navigation (arrow keys, enter, escape), a search input with microphone and camera icons for visual completeness, and responsive design that works across different screen sizes. The search suggestions dropdown provides real-time feedback as users type, enhancing the authentic Google search experience.\n\n# External Dependencies\n\n## Frontend Libraries\n- **Bootstrap 5.3.0**: Provides responsive grid system, form styling, and utility classes for consistent UI components across the application\n- **Font Awesome 6.4.0**: Supplies vector icons for search, microphone, camera, and other interface elements that match Google's visual design\n\n## Python Framework\n- **Flask**: Lightweight web framework handling routing, templating, and request/response processing for the server-side application logic\n\n## Static Assets\n- **Mock Data Files**: JSON files containing search results and suggestions data that simulate real search functionality without requiring external APIs or databases\n- **Custom CSS/JavaScript**: Application-specific styling and interactive features that recreate Google's distinctive look and feel, including the multicolored logo and search suggestions behavior","size_bytes":3709},"static/css/styles.css":{"content":"/* Global Styles */\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #fff;\n    color: #3c4043;\n}\n\n/* Homepage Styles */\n.homepage-container {\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n\n.google-logo {\n    font-size: 90px;\n    font-weight: normal;\n    text-decoration: none;\n    user-select: none;\n}\n\n.logo-g { color: #4285f4; }\n.logo-o1 { color: #ea4335; }\n.logo-o2 { color: #fbbc05; }\n.logo-l { color: #34a853; }\n.logo-e { color: #ea4335; }\n\n.google-logo-small {\n    font-size: 30px;\n    font-weight: normal;\n    text-decoration: none;\n    user-select: none;\n}\n\n.google-logo-small .logo-g { color: #4285f4; }\n.google-logo-small .logo-o1 { color: #ea4335; }\n.google-logo-small .logo-o2 { color: #fbbc05; }\n.google-logo-small .logo-l { color: #34a853; }\n.google-logo-small .logo-e { color: #ea4335; }\n\n/* Search Form Styles */\n.search-container {\n    width: 100%;\n    max-width: 584px;\n    margin: 0 auto;\n}\n\n.search-input-wrapper {\n    position: relative;\n    display: flex;\n    align-items: center;\n    border: 1px solid #dfe1e5;\n    border-radius: 24px;\n    padding: 0 16px;\n    height: 44px;\n    transition: box-shadow 0.3s;\n}\n\n.search-input-wrapper:hover {\n    box-shadow: 0 2px 5px 1px rgba(64,60,67,.16);\n    border-color: rgba(223,225,229,0);\n}\n\n.search-input-wrapper:focus-within {\n    box-shadow: 0 2px 5px 1px rgba(64,60,67,.16);\n    border-color: rgba(223,225,229,0);\n}\n\n.search-input {\n    flex: 1;\n    border: none;\n    outline: none;\n    padding: 0 12px;\n    font-size: 16px;\n    background: transparent;\n}\n\n.search-icon {\n    color: #9aa0a6;\n    font-size: 14px;\n    margin-right: 8px;\n}\n\n.mic-icon, .camera-icon {\n    color: #4285f4;\n    font-size: 16px;\n    margin-left: 8px;\n    cursor: pointer;\n    padding: 8px;\n}\n\n.mic-icon:hover, .camera-icon:hover {\n    background-color: #f8f9fa;\n    border-radius: 50%;\n}\n\n/* Search Buttons */\n.search-buttons {\n    text-align: center;\n}\n\n.search-btn, .lucky-btn {\n    background-color: #f8f9fa;\n    border: 1px solid #f8f9fa;\n    border-radius: 4px;\n    color: #3c4043;\n    font-size: 14px;\n    margin: 11px 4px;\n    padding: 0 20px;\n    line-height: 36px;\n    text-align: center;\n    cursor: pointer;\n    user-select: none;\n    transition: box-shadow 0.3s, border-color 0.3s;\n}\n\n.search-btn:hover, .lucky-btn:hover {\n    box-shadow: 0 1px 1px rgba(0,0,0,.1);\n    background-color: #f8f9fa;\n    border: 1px solid #dadce0;\n    color: #202124;\n}\n\n/* Language Options */\n.language-options {\n    font-size: 13px;\n    color: #3c4043;\n}\n\n.language-link {\n    color: #1a0dab;\n    text-decoration: none;\n    margin: 0 3px;\n}\n\n.language-link:hover {\n    text-decoration: underline;\n}\n\n/* Suggestions Dropdown */\n.suggestions-dropdown {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    right: 0;\n    background: #fff;\n    border: 1px solid #d9d9d9;\n    border-top: none;\n    border-radius: 0 0 24px 24px;\n    box-shadow: 0 2px 5px 1px rgba(64,60,67,.16);\n    display: none;\n    z-index: 1000;\n}\n\n.suggestions-dropdown.show {\n    display: block;\n}\n\n.suggestions-list {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n}\n\n.suggestions-list li {\n    padding: 8px 16px;\n    cursor: pointer;\n    font-size: 16px;\n    color: #212121;\n}\n\n.suggestions-list li:hover {\n    background-color: #f5f5f5;\n}\n\n.suggestions-list li:first-child {\n    padding-top: 12px;\n}\n\n.suggestions-list li:last-child {\n    padding-bottom: 12px;\n}\n\n/* Homepage Footer */\n.homepage-footer {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    background-color: #f2f2f2;\n}\n\n.footer-country {\n    padding: 15px 30px;\n    border-bottom: 1px solid #dadce0;\n    font-size: 15px;\n    color: rgba(0,0,0,.54);\n}\n\n.footer-links {\n    display: flex;\n    justify-content: space-between;\n    padding: 0 20px;\n}\n\n.footer-left, .footer-right {\n    display: flex;\n}\n\n.footer-link {\n    padding: 15px;\n    color: rgba(0,0,0,.54);\n    text-decoration: none;\n    font-size: 14px;\n}\n\n.footer-link:hover {\n    text-decoration: underline;\n    color: rgba(0,0,0,.54);\n}\n\n/* Search Page Styles */\n.search-page {\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n\n.search-header {\n    border-bottom: 1px solid #dadce0;\n    padding: 6px 0;\n}\n\n.search-container-header {\n    max-width: 690px;\n}\n\n.search-input-wrapper-header {\n    position: relative;\n    display: flex;\n    align-items: center;\n    border: 1px solid #dfe1e5;\n    border-radius: 24px;\n    padding: 0 16px;\n    height: 44px;\n    background: #fff;\n}\n\n.search-input-header {\n    flex: 1;\n    border: none;\n    outline: none;\n    padding: 0 12px;\n    font-size: 16px;\n    background: transparent;\n}\n\n.search-btn-header {\n    background: none;\n    border: none;\n    color: #4285f4;\n    padding: 8px;\n    cursor: pointer;\n    margin-left: 8px;\n}\n\n.mic-icon-header, .camera-icon-header {\n    color: #4285f4;\n    font-size: 16px;\n    margin-left: 8px;\n    cursor: pointer;\n    padding: 8px;\n}\n\n.header-actions {\n    display: flex;\n    align-items: center;\n    gap: 15px;\n}\n\n.apps-icon {\n    color: #5f6368;\n    font-size: 18px;\n    cursor: pointer;\n    padding: 8px;\n}\n\n.profile-circle {\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    background-color: #4285f4;\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 14px;\n    cursor: pointer;\n}\n\n/* Search Navigation */\n.search-nav {\n    border-bottom: 1px solid #dadce0;\n}\n\n.nav-tabs-container {\n    display: flex;\n    align-items: center;\n    padding: 0 20px;\n    gap: 0;\n}\n\n.nav-tab {\n    color: #5f6368;\n    text-decoration: none;\n    padding: 12px 16px;\n    font-size: 13px;\n    border-bottom: 3px solid transparent;\n    display: flex;\n    align-items: center;\n    gap: 6px;\n}\n\n.nav-tab.active {\n    color: #1a73e8;\n    border-bottom-color: #1a73e8;\n}\n\n.nav-tab:hover {\n    color: #1a73e8;\n    text-decoration: none;\n}\n\n.nav-divider {\n    width: 1px;\n    height: 32px;\n    background-color: #dadce0;\n    margin: 0 16px;\n}\n\n/* Search Results */\n.search-results {\n    flex: 1;\n    padding: 20px 0;\n}\n\n.results-info {\n    color: #70757a;\n    font-size: 14px;\n    margin: 0 0 20px 0;\n    padding: 0 20px;\n}\n\n.search-result {\n    margin: 0 0 24px 0;\n    padding: 0 20px;\n}\n\n.result-url {\n    font-size: 14px;\n    color: #202124;\n    margin-bottom: 2px;\n    display: flex;\n    align-items: center;\n}\n\n.result-domain {\n    color: #202124;\n}\n\n.breadcrumb-arrow {\n    color: #70757a;\n    font-size: 10px;\n    margin-left: 6px;\n}\n\n.result-title {\n    margin: 0 0 4px 0;\n}\n\n.result-title a {\n    color: #1a0dab;\n    text-decoration: none;\n    font-size: 20px;\n    font-weight: normal;\n    line-height: 1.3;\n}\n\n.result-title a:hover {\n    text-decoration: underline;\n}\n\n.result-title a:visited {\n    color: #681da8;\n}\n\n.result-snippet {\n    color: #4d5156;\n    font-size: 14px;\n    line-height: 1.58;\n    margin: 0;\n}\n\n/* No Results */\n.no-results {\n    padding: 20px;\n    color: #3c4043;\n}\n\n.no-results ul {\n    margin: 16px 0;\n    padding-left: 20px;\n}\n\n.no-results li {\n    margin: 4px 0;\n}\n\n/* Pagination */\n.pagination-nav {\n    margin-top: 30px;\n    padding: 0 20px;\n}\n\n.pagination-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 12px;\n}\n\n.pagination-link {\n    color: #1a73e8;\n    text-decoration: none;\n    padding: 8px 16px;\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    font-size: 14px;\n}\n\n.pagination-link:hover {\n    text-decoration: underline;\n    color: #1a73e8;\n}\n\n.pagination-numbers {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.pagination-number {\n    color: #1a73e8;\n    text-decoration: none;\n    padding: 8px 12px;\n    font-size: 14px;\n    border-radius: 4px;\n}\n\n.pagination-number:hover {\n    background-color: #f8f9fa;\n    color: #1a73e8;\n    text-decoration: none;\n}\n\n.pagination-current {\n    background-color: #1a73e8;\n    color: white;\n    padding: 8px 12px;\n    border-radius: 4px;\n    font-size: 14px;\n}\n\n/* Search Footer */\n.search-footer {\n    margin-top: auto;\n    background-color: #f2f2f2;\n    border-top: 1px solid #dadce0;\n}\n\n.search-footer .footer-links {\n    padding: 0 20px;\n    justify-content: flex-start;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .google-logo {\n        font-size: 60px;\n    }\n    \n    .search-container {\n        max-width: 90%;\n    }\n    \n    .footer-links {\n        flex-direction: column;\n        padding: 0;\n    }\n    \n    .footer-left, .footer-right {\n        justify-content: center;\n        flex-wrap: wrap;\n    }\n    \n    .nav-tabs-container {\n        overflow-x: auto;\n        padding: 0 10px;\n    }\n    \n    .search-result {\n        padding: 0 10px;\n    }\n    \n    .results-info {\n        padding: 0 10px;\n    }\n    \n    .pagination-nav {\n        padding: 0 10px;\n    }\n    \n    .search-footer .footer-links {\n        padding: 0 10px;\n    }\n}\n\n@media (max-width: 480px) {\n    .google-logo {\n        font-size: 48px;\n    }\n    \n    .search-buttons {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 8px;\n    }\n    \n    .search-btn, .lucky-btn {\n        margin: 4px;\n        min-width: 120px;\n    }\n    \n    .language-options {\n        text-align: center;\n        padding: 0 20px;\n    }\n    \n    .pagination-container {\n        flex-wrap: wrap;\n        gap: 8px;\n    }\n}\n","size_bytes":9391},"static/js/main.js":{"content":"// Main JavaScript functionality for Google Search Clone\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeSearchSuggestions();\n    initializeSearchForms();\n});\n\n// Initialize search suggestions functionality\nfunction initializeSearchSuggestions() {\n    const searchInputs = document.querySelectorAll('#search-input, #search-input-header');\n    \n    searchInputs.forEach(input => {\n        const dropdownId = input.id === 'search-input' ? 'suggestions-dropdown' : 'suggestions-dropdown-header';\n        const listId = input.id === 'search-input' ? 'suggestions-list' : 'suggestions-list-header';\n        \n        const dropdown = document.getElementById(dropdownId);\n        const suggestionsList = document.getElementById(listId);\n        \n        if (!dropdown || !suggestionsList) return;\n        \n        let currentSuggestionIndex = -1;\n        let suggestions = [];\n        \n        // Handle input events\n        input.addEventListener('input', function() {\n            const query = this.value.trim();\n            \n            if (query.length > 0) {\n                fetchSuggestions(query).then(data => {\n                    suggestions = data;\n                    displaySuggestions(data, suggestionsList, dropdown);\n                });\n            } else {\n                hideSuggestions(dropdown);\n            }\n        });\n        \n        // Handle keyboard navigation\n        input.addEventListener('keydown', function(e) {\n            if (!dropdown.classList.contains('show')) return;\n            \n            switch(e.key) {\n                case 'ArrowDown':\n                    e.preventDefault();\n                    currentSuggestionIndex = Math.min(currentSuggestionIndex + 1, suggestions.length - 1);\n                    highlightSuggestion(suggestionsList, currentSuggestionIndex);\n                    break;\n                    \n                case 'ArrowUp':\n                    e.preventDefault();\n                    currentSuggestionIndex = Math.max(currentSuggestionIndex - 1, -1);\n                    highlightSuggestion(suggestionsList, currentSuggestionIndex);\n                    break;\n                    \n                case 'Enter':\n                    if (currentSuggestionIndex >= 0) {\n                        e.preventDefault();\n                        this.value = suggestions[currentSuggestionIndex];\n                        hideSuggestions(dropdown);\n                        this.form.submit();\n                    }\n                    break;\n                    \n                case 'Escape':\n                    hideSuggestions(dropdown);\n                    currentSuggestionIndex = -1;\n                    break;\n            }\n        });\n        \n        // Handle focus events\n        input.addEventListener('focus', function() {\n            if (suggestions.length > 0) {\n                dropdown.classList.add('show');\n            }\n        });\n        \n        // Handle clicks outside\n        document.addEventListener('click', function(e) {\n            if (!input.contains(e.target) && !dropdown.contains(e.target)) {\n                hideSuggestions(dropdown);\n                currentSuggestionIndex = -1;\n            }\n        });\n    });\n}\n\n// Fetch search suggestions from API\nasync function fetchSuggestions(query) {\n    try {\n        const response = await fetch(`/api/suggestions?q=${encodeURIComponent(query)}`);\n        if (response.ok) {\n            return await response.json();\n        }\n    } catch (error) {\n        console.error('Error fetching suggestions:', error);\n    }\n    return [];\n}\n\n// Display suggestions in dropdown\nfunction displaySuggestions(suggestions, list, dropdown) {\n    list.innerHTML = '';\n    \n    if (suggestions.length === 0) {\n        hideSuggestions(dropdown);\n        return;\n    }\n    \n    suggestions.forEach((suggestion, index) => {\n        const li = document.createElement('li');\n        li.textContent = suggestion;\n        li.addEventListener('click', function() {\n            const input = dropdown.previousElementSibling.querySelector('input');\n            input.value = suggestion;\n            hideSuggestions(dropdown);\n            input.form.submit();\n        });\n        list.appendChild(li);\n    });\n    \n    dropdown.classList.add('show');\n}\n\n// Hide suggestions dropdown\nfunction hideSuggestions(dropdown) {\n    dropdown.classList.remove('show');\n}\n\n// Highlight suggestion for keyboard navigation\nfunction highlightSuggestion(list, index) {\n    const items = list.querySelectorAll('li');\n    \n    items.forEach((item, i) => {\n        if (i === index) {\n            item.style.backgroundColor = '#e8f0fe';\n        } else {\n            item.style.backgroundColor = '';\n        }\n    });\n}\n\n// Initialize search form functionality\nfunction initializeSearchForms() {\n    const searchForms = document.querySelectorAll('.search-form, .search-form-header');\n    \n    searchForms.forEach(form => {\n        form.addEventListener('submit', function(e) {\n            const input = form.querySelector('input[name=\"q\"]');\n            if (!input.value.trim()) {\n                e.preventDefault();\n                input.focus();\n            }\n        });\n    });\n}\n\n// Voice search simulation (placeholder)\ndocument.addEventListener('click', function(e) {\n    if (e.target.classList.contains('mic-icon') || e.target.classList.contains('mic-icon-header')) {\n        alert('Voice search is not implemented in this demo');\n    }\n});\n\n// Camera search simulation (placeholder)\ndocument.addEventListener('click', function(e) {\n    if (e.target.classList.contains('camera-icon') || e.target.classList.contains('camera-icon-header')) {\n        alert('Image search is not implemented in this demo');\n    }\n});\n\n// Add loading state for search\nfunction showLoadingState() {\n    const searchButtons = document.querySelectorAll('.search-btn');\n    searchButtons.forEach(btn => {\n        btn.disabled = true;\n        btn.textContent = 'Searching...';\n    });\n}\n\n// Smooth scrolling for pagination\ndocument.addEventListener('click', function(e) {\n    if (e.target.closest('.pagination-link, .pagination-number')) {\n        // Add smooth scrolling to top when navigating pages\n        setTimeout(() => {\n            window.scrollTo({ top: 0, behavior: 'smooth' });\n        }, 100);\n    }\n});\n\n// Apps menu simulation\ndocument.addEventListener('click', function(e) {\n    if (e.target.classList.contains('apps-icon')) {\n        alert('Google Apps menu is not implemented in this demo');\n    }\n});\n\n// Profile menu simulation\ndocument.addEventListener('click', function(e) {\n    if (e.target.classList.contains('profile-circle')) {\n        alert('Profile menu is not implemented in this demo');\n    }\n});\n","size_bytes":6714}}}